#!/bin/bash

case "$1" in
""|"-h"|"--help"|"help")
    echo "Usage: $0 SUBCOMMAND"
    echo "Manage GPG keys through a friendly and efficient interface!"
    echo ""
    echo "Available subcommands:"
    echo "  - ls: Show GPG keys in the keychain."
    echo "  - renew: Update the expiration of a GPG key and optionally its subkeys."
    echo "  - import: Import a GPG key or multiple keys."
    echo "  - export: Export a GPG key and optionally its subkeys."
    echo ""
    echo '  Try `$0 SUBCOMMAND -h` to see the help for that subcommand.'
    ;;
"ls")
    case "$2" in
    "-s"|"--secret"|"--priv")
        gpg --list-secret-keys | grep 'uid' | grep -oP '(?<=\s)\[.*'
        ;;
    *)
        gpg --list-keys | grep 'uid' | grep -oP '(?<=\s)\[.*'
        ;;
    esac
    ;;
"renew")
    case "$2" in
    ""|"-h"|"--help"|"help")
        echo "Usage: $0 renew [-a|--all] KEY [DELAY]"
        echo "Renew a gpg key to prevent it from expiring."
        echo ""
        echo "-a|--all: Renew all subkeys for the given key."
        echo "KEY: The ID of the key, or the email address associated with it."
        echo "DELAY: How long from now the key should expire (default: never expire)."
        echo "     0 = key does not expire"
        echo "  <n>  = key expires in n days"
        echo "  <n>w = key expires in n weeks"
        echo "  <n>m = key expires in n months"
        echo "  <n>y = key expires in n years"
        ;;
    "-a"|"--all")
        key=$3
        delay=$4
        result=$(printf "expire\n$delay\nsave\n" | gpg --batch --command-fd 0 --edit-key $key 2>&1)
        echo "$result" | grep 'expires\? at'

        let subkey_num=1
        for subkey in $(gpg --list-secret-keys 2>/dev/null | awk "/$key/,/^$/" | grep 'ssb' | grep -oP '(?<=/)\S+'); do
            printf "key $subkey_num\nexpire\n$delay\nsave\n" | gpg --batch --command-fd 0 --edit-key $key 2>/dev/null 1>/dev/null
            let subkey_num++
        done
        ;;
    *)
        result=$(printf "expire\n$3\nsave\n" | gpg --batch --command-fd 0 --edit-key $2 2>&1)
        echo "$result" | grep 'expires\? at'
        ;;
    esac
    ;;
"import")
    case "$2" in
    ""|"-h"|"--help"|"help")
        echo "Usage: $0 import [-a|--all] FILE"
        echo "Import a GPG key, or multiple keys from an archive."
        echo ""
        echo "-a|--archive: Import all keys in the archive."
        echo "FILE: The key file to import. This may be an archive, or a directory."
        echo "In the case of an archive, the format must be either zip or gzip."
        ;;
    "-a"|"--all")
        temp_dir=$(mktemp -d)
        cleanup_temp_dir=true
        file_type=$(file $3 2>&1)

        if [ -z "$3" ]; then
            echo "FILE is a required parameter."
            $0 import -h
            exit 1
        fi

        if echo "$file_type" | grep -q "Zip"; then
            unzip "$3" -d "$temp_dir"
        elif echo "$file_type" | grep -q "gzip"; then
            tar zxvf "$3" --directory "$temp_dir"
        elif echo "$file_type" | grep -q "directory$"; then
            rm -rf "$temp_dir"
            cleanup_temp_dir=false
            temp_dir=$3
        else
            echo "FILE is of an invalid type."
            pg import -h
            exit 1
        fi

        for file in "$temp_dir"/*; do
            if file $file | grep -q "PGP"; then
                gpg --import $file
            fi
        done

        if [ "$cleanup_temp_dir" = true ]; then
            rm -rf "$temp_dir"
        fi
        ;;
    *)
        gpg --import $2
    esac
    ;;
"export")
    echo "Not yet implemented!"
    case "$2" in
        *)
        ;;
    esac
    ;;
*)
    gpg "$@"
    ;;
esac